package com.mycompany.moviemind;


import java.awt.CardLayout;
import java.awt.Desktop;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URISyntaxException;
import java.net.URL;
import java.nio.charset.Charset;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JPanel;
import javax.swing.Timer;
import org.apache.commons.io.IOUtils;
import org.json.JSONArray;
import org.json.JSONObject;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import javax.swing.SwingWorker;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Rama Krishna
 */
public class MainWindow extends javax.swing.JFrame {

    /**
     * Creates new form MainWindow
     */
    
    String imdb;
    int id, movieid;
    String currentdate, dbdate;
    DateFormat df = new SimpleDateFormat("dd-MM-yyyy");
    String yearsettings, genresettings;
    Timer timer;
    
    public MainWindow() {
        initComponents();
        getSettings();
        styleUI();
        getSavedData(); 
        Date today = Calendar.getInstance().getTime();
        currentdate = df.format(today);
        if(!(currentdate.equals(dbdate)))
        {
            updateID();
            updateDate();
        }
        try {
            validateSettings();
        } catch (IOException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            processCode();
        } catch (IOException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bodyPanel = new javax.swing.JPanel();
        spotlightPanel = new javax.swing.JPanel();
        spotlightTitle = new javax.swing.JLabel();
        posterView = new javax.swing.JLabel();
        titleLabel = new javax.swing.JLabel();
        yearLabel = new javax.swing.JLabel();
        genreLabel = new javax.swing.JLabel();
        directorLabel = new javax.swing.JLabel();
        overviewLabel = new javax.swing.JLabel();
        btnImdb = new javax.swing.JButton();
        btnChange = new javax.swing.JButton();
        loadLabel = new javax.swing.JLabel();
        bgSpotlight = new javax.swing.JLabel();
        settingsPanel = new javax.swing.JPanel();
        settingsTopLabel = new javax.swing.JLabel();
        genreSettingsLabel = new javax.swing.JLabel();
        yearSettingsLabel = new javax.swing.JLabel();
        genreSettings = new javax.swing.JComboBox<>();
        yearSettings = new javax.swing.JComboBox<>();
        btnSaveSettings = new javax.swing.JButton();
        loadLabel2 = new javax.swing.JLabel();
        bgSettings = new javax.swing.JLabel();
        helpPanel = new javax.swing.JPanel();
        aboutLabel = new javax.swing.JLabel();
        descLabel = new javax.swing.JLabel();
        touchLabel = new javax.swing.JLabel();
        clipboardLabel = new javax.swing.JLabel();
        btnMsg = new javax.swing.JButton();
        btnMail = new javax.swing.JButton();
        btnFB = new javax.swing.JButton();
        bgHelp = new javax.swing.JLabel();
        menuBar = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        btnSpotlight = new javax.swing.JButton();
        btnSettings = new javax.swing.JButton();
        btnHelp = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Movie Mind");
        setMaximumSize(new java.awt.Dimension(1000, 600));
        setMinimumSize(new java.awt.Dimension(1000, 600));
        setName("mainframe"); // NOI18N
        setResizable(false);

        bodyPanel.setBackground(new java.awt.Color(255, 255, 255));
        bodyPanel.setMaximumSize(new java.awt.Dimension(1000, 523));
        bodyPanel.setMinimumSize(new java.awt.Dimension(1000, 523));
        bodyPanel.setName(""); // NOI18N
        bodyPanel.setPreferredSize(new java.awt.Dimension(1000, 523));
        bodyPanel.setLayout(new java.awt.CardLayout());

        spotlightPanel.setLayout(null);

        spotlightTitle.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        spotlightTitle.setForeground(new java.awt.Color(255, 255, 255));
        spotlightTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        spotlightTitle.setText("Movie of the Day");
        spotlightPanel.add(spotlightTitle);
        spotlightTitle.setBounds(40, 20, 200, 30);

        posterView.setForeground(new java.awt.Color(255, 255, 255));
        spotlightPanel.add(posterView);
        posterView.setBounds(80, 80, 250, 380);

        titleLabel.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        titleLabel.setForeground(new java.awt.Color(255, 255, 255));
        titleLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        titleLabel.setText("Title");
        titleLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        spotlightPanel.add(titleLabel);
        titleLabel.setBounds(415, 74, 520, 60);

        yearLabel.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        yearLabel.setForeground(new java.awt.Color(255, 255, 255));
        yearLabel.setText("Year");
        spotlightPanel.add(yearLabel);
        yearLabel.setBounds(420, 140, 100, 30);

        genreLabel.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        genreLabel.setForeground(new java.awt.Color(255, 255, 255));
        genreLabel.setText("Genre");
        spotlightPanel.add(genreLabel);
        genreLabel.setBounds(530, 140, 400, 30);

        directorLabel.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        directorLabel.setForeground(new java.awt.Color(255, 255, 255));
        directorLabel.setText("Director");
        directorLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        spotlightPanel.add(directorLabel);
        directorLabel.setBounds(420, 190, 380, 30);

        overviewLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        overviewLabel.setForeground(new java.awt.Color(255, 255, 255));
        overviewLabel.setText("Overview");
        overviewLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        spotlightPanel.add(overviewLabel);
        overviewLabel.setBounds(420, 240, 520, 170);

        btnImdb.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        btnImdb.setForeground(new java.awt.Color(255, 255, 255));
        btnImdb.setText("<html><u>More info<u></html>");
        btnImdb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnImdb.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnImdb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImdbActionPerformed(evt);
            }
        });
        spotlightPanel.add(btnImdb);
        btnImdb.setBounds(420, 420, 85, 25);

        btnChange.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        btnChange.setForeground(new java.awt.Color(255, 255, 255));
        btnChange.setText("<html><u>Already watched it? [Get another one]</u></html>");
        btnChange.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnChange.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnChange.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChangeActionPerformed(evt);
            }
        });
        spotlightPanel.add(btnChange);
        btnChange.setBounds(550, 420, 240, 25);

        loadLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        spotlightPanel.add(loadLabel);
        loadLabel.setBounds(340, 480, 310, 30);

        bgSpotlight.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        bgSpotlight.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        bgSpotlight.setMaximumSize(new java.awt.Dimension(1000, 523));
        bgSpotlight.setMinimumSize(new java.awt.Dimension(1000, 523));
        bgSpotlight.setPreferredSize(new java.awt.Dimension(1000, 523));
        spotlightPanel.add(bgSpotlight);
        bgSpotlight.setBounds(0, 0, 1000, 523);

        bodyPanel.add(spotlightPanel, "card1");

        settingsPanel.setLayout(null);

        settingsTopLabel.setFont(new java.awt.Font("Segoe UI", 1, 20)); // NOI18N
        settingsTopLabel.setForeground(new java.awt.Color(255, 255, 255));
        settingsTopLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        settingsTopLabel.setText("Settings");
        settingsPanel.add(settingsTopLabel);
        settingsTopLabel.setBounds(120, 50, 80, 40);

        genreSettingsLabel.setFont(new java.awt.Font("Segoe UI Semibold", 0, 18)); // NOI18N
        genreSettingsLabel.setForeground(new java.awt.Color(255, 255, 255));
        genreSettingsLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        genreSettingsLabel.setText("Genre");
        settingsPanel.add(genreSettingsLabel);
        genreSettingsLabel.setBounds(300, 130, 60, 30);

        yearSettingsLabel.setFont(new java.awt.Font("Segoe UI Semibold", 0, 18)); // NOI18N
        yearSettingsLabel.setForeground(new java.awt.Color(255, 255, 255));
        yearSettingsLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        yearSettingsLabel.setText("Year Range");
        settingsPanel.add(yearSettingsLabel);
        yearSettingsLabel.setBounds(300, 210, 100, 30);

        genreSettings.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        genreSettings.setMaximumRowCount(4);
        genreSettings.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None", "Action", "Adventure", "Animation", "Comedy", "Crime", "Documentary", "Drama", "Fantasy", "Horror", "Mystery", "Romance", "Science Fiction", "Thriller", "War", "Western", "History" }));
        settingsPanel.add(genreSettings);
        genreSettings.setBounds(520, 130, 200, 40);

        yearSettings.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        yearSettings.setMaximumRowCount(4);
        yearSettings.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None", "1910s - 1990s", "2000s - 2010s" }));
        settingsPanel.add(yearSettings);
        yearSettings.setBounds(520, 210, 200, 40);

        btnSaveSettings.setFont(new java.awt.Font("Segoe UI Semibold", 0, 16)); // NOI18N
        btnSaveSettings.setText("Save");
        btnSaveSettings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveSettingsActionPerformed(evt);
            }
        });
        settingsPanel.add(btnSaveSettings);
        btnSaveSettings.setBounds(420, 340, 120, 40);

        loadLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        settingsPanel.add(loadLabel2);
        loadLabel2.setBounds(330, 460, 310, 30);

        bgSettings.setMaximumSize(new java.awt.Dimension(1000, 523));
        bgSettings.setMinimumSize(new java.awt.Dimension(1000, 523));
        bgSettings.setPreferredSize(new java.awt.Dimension(1000, 523));
        settingsPanel.add(bgSettings);
        bgSettings.setBounds(0, 0, 1000, 523);

        bodyPanel.add(settingsPanel, "card3");

        helpPanel.setLayout(null);

        aboutLabel.setFont(new java.awt.Font("Segoe UI Semibold", 0, 16)); // NOI18N
        aboutLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        aboutLabel.setText("About");
        helpPanel.add(aboutLabel);
        aboutLabel.setBounds(390, 30, 190, 22);

        descLabel.setFont(new java.awt.Font("Segoe UI Semibold", 0, 18)); // NOI18N
        descLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        descLabel.setText("A simple java application that recommends you good movies to watch");
        helpPanel.add(descLabel);
        descLabel.setBounds(190, 80, 610, 25);

        touchLabel.setFont(new java.awt.Font("Segoe UI Semibold", 0, 16)); // NOI18N
        touchLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        touchLabel.setText("Get in touch with us");
        helpPanel.add(touchLabel);
        touchLabel.setBounds(390, 140, 190, 22);

        clipboardLabel.setFont(new java.awt.Font("Segoe UI Semibold", 0, 16)); // NOI18N
        clipboardLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        clipboardLabel.setText("Mail id copied to Clipboard");
        helpPanel.add(clipboardLabel);
        clipboardLabel.setBounds(380, 290, 220, 22);

        btnMsg.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnMsg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMsgActionPerformed(evt);
            }
        });
        helpPanel.add(btnMsg);
        btnMsg.setBounds(460, 190, 50, 50);

        btnMail.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnMail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMailActionPerformed(evt);
            }
        });
        helpPanel.add(btnMail);
        btnMail.setBounds(550, 190, 50, 50);

        btnFB.setBackground(new java.awt.Color(255, 255, 255));
        btnFB.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnFB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFBActionPerformed(evt);
            }
        });
        helpPanel.add(btnFB);
        btnFB.setBounds(370, 190, 50, 50);

        bgHelp.setMaximumSize(new java.awt.Dimension(1000, 523));
        bgHelp.setMinimumSize(new java.awt.Dimension(1000, 523));
        bgHelp.setPreferredSize(new java.awt.Dimension(1000, 523));
        helpPanel.add(bgHelp);
        bgHelp.setBounds(0, 0, 1000, 523);

        bodyPanel.add(helpPanel, "card4");

        getContentPane().add(bodyPanel, java.awt.BorderLayout.CENTER);

        menuBar.setBackground(new java.awt.Color(255, 255, 255));
        menuBar.setMaximumSize(new java.awt.Dimension(1000, 77));
        menuBar.setMinimumSize(new java.awt.Dimension(1000, 77));
        menuBar.setPreferredSize(new java.awt.Dimension(1000, 77));

        jLabel2.setFont(new java.awt.Font("Arial Narrow", 1, 24)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("MOVIE MIND");

        btnSpotlight.setFont(new java.awt.Font("Segoe UI Semibold", 0, 16)); // NOI18N
        btnSpotlight.setText("Spotlight");
        btnSpotlight.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSpotlight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSpotlightActionPerformed(evt);
            }
        });

        btnSettings.setFont(new java.awt.Font("Segoe UI Semibold", 0, 16)); // NOI18N
        btnSettings.setText("Settings");
        btnSettings.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSettings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSettingsActionPerformed(evt);
            }
        });

        btnHelp.setFont(new java.awt.Font("Segoe UI Semibold", 0, 16)); // NOI18N
        btnHelp.setText("Help");
        btnHelp.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHelpActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout menuBarLayout = new javax.swing.GroupLayout(menuBar);
        menuBar.setLayout(menuBarLayout);
        menuBarLayout.setHorizontalGroup(
            menuBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(menuBarLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 439, Short.MAX_VALUE)
                .addComponent(btnSpotlight, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnSettings, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnHelp, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26))
        );
        menuBarLayout.setVerticalGroup(
            menuBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, menuBarLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(menuBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 55, Short.MAX_VALUE)
                    .addComponent(btnSpotlight, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSettings, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnHelp, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        getContentPane().add(menuBar, java.awt.BorderLayout.PAGE_START);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSpotlightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSpotlightActionPerformed
        CardLayout card = (CardLayout)bodyPanel.getLayout();
        card.show(bodyPanel, "card1");
    }//GEN-LAST:event_btnSpotlightActionPerformed

    private void btnSettingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSettingsActionPerformed
        CardLayout card = (CardLayout)bodyPanel.getLayout();
        card.show(bodyPanel, "card3");
        
        genreSettings.setSelectedItem(genresettings);
        yearSettings.setSelectedItem(yearsettings);
    }//GEN-LAST:event_btnSettingsActionPerformed

    private void btnHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHelpActionPerformed
        CardLayout card = (CardLayout)bodyPanel.getLayout();
        card.show(bodyPanel, "card4");
    }//GEN-LAST:event_btnHelpActionPerformed

    private void btnImdbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImdbActionPerformed
        try {
            Desktop.getDesktop().browse(new URL(imdb).toURI());
        } catch (IOException | URISyntaxException e) {
        }
    }//GEN-LAST:event_btnImdbActionPerformed

    private void btnChangeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChangeActionPerformed
        updateID();
        SwingWorker<Void, Void> sw1 = new SwingWorker<Void, Void>()
        {
            @Override
            protected Void doInBackground()
            {
                try {
                    validateSettings();
                } catch (IOException ex) {
                    Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                }
                return null;
            }
            
            @Override
            protected void done()
            {
                try {
                    processCode();
                } catch (IOException ex) {
                    Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                }
                
                loadLabel.setVisible(false);
                btnImdb.setEnabled(true);
                btnChange.setEnabled(true);
                btnSaveSettings.setEnabled(true);
            }
        };
        
        loadLabel.setVisible(true);
        btnImdb.setEnabled(false);
        btnChange.setEnabled(false);
        btnSaveSettings.setEnabled(false);
        
        sw1.execute();
    }//GEN-LAST:event_btnChangeActionPerformed

    private void btnSaveSettingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveSettingsActionPerformed
        genresettings = genreSettings.getSelectedItem().toString();
        yearsettings = yearSettings.getSelectedItem().toString();
        updateSettings();
        SwingWorker<Void, Void> sw2 = new SwingWorker<Void, Void>()
        {
            @Override
            protected Void doInBackground()
            {
                try {
                    validateSettings();
                } catch (IOException ex) {
                    Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                }
                return null;
            }
            
            @Override
            protected void done()
            {
                try {
                    processCode();
                } catch (IOException ex) {
                    Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                }
                
                loadLabel.setVisible(false);
                loadLabel2.setVisible(false);
                btnImdb.setEnabled(true);
                btnChange.setEnabled(true);
                btnSaveSettings.setEnabled(true);
            }
        };
        
        loadLabel.setVisible(true);
        loadLabel2.setVisible(true);
        btnSaveSettings.setEnabled(false);
        btnImdb.setEnabled(false);
        btnChange.setEnabled(false);
        
        sw2.execute();
    }//GEN-LAST:event_btnSaveSettingsActionPerformed

    private void btnFBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFBActionPerformed
        try {
            Desktop.getDesktop().browse(new URL("https://fb.me/Mr.MovieMind").toURI());
        } catch (IOException | URISyntaxException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnFBActionPerformed

    private void btnMsgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMsgActionPerformed
        try {
            Desktop.getDesktop().browse(new URL("https://www.messenger.com/t/Mr.MovieMind").toURI());
        } catch (IOException | URISyntaxException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnMsgActionPerformed

    private void btnMailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMailActionPerformed
        String mymail = "bodavularamakrishna@gmail.com";
        StringSelection stringSelection = new StringSelection(mymail);
        Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
        clipboard.setContents(stringSelection, null);
        
        clipboardLabel.setVisible(true);
        timer = new Timer(2500, new ActionListener(){
          public void actionPerformed(ActionEvent e) {
              clipboardLabel.setVisible(false);
              timer.stop();
          }
        }); 
        timer.start(); 
    }//GEN-LAST:event_btnMailActionPerformed
    
    private void styleUI() {
        try {
            setIconImage(ImageIO.read(new File("images/Logo_image.png")));
        } catch (IOException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        ImageIcon imageIcon1 = new ImageIcon(new ImageIcon("images/One_spotlight_cropped.jpg").getImage().getScaledInstance(1000, 523, Image.SCALE_AREA_AVERAGING));
        bgSpotlight.setIcon(imageIcon1);
        ImageIcon imageIcon2 = new ImageIcon(new ImageIcon("images/Collection_Denim.jpg").getImage().getScaledInstance(1000, 523, Image.SCALE_AREA_AVERAGING));
        bgSettings.setIcon(imageIcon2);
        ImageIcon imageIcon3 = new ImageIcon(new ImageIcon("images/Help1.jpg").getImage().getScaledInstance(1000, 523, Image.SCALE_AREA_AVERAGING));
        bgHelp.setIcon(imageIcon3);
        ImageIcon imageIcon4 = new ImageIcon("images/gif4.gif");
        loadLabel.setIcon(imageIcon4);
        loadLabel2.setIcon(imageIcon4);
        ImageIcon fb = new ImageIcon(new ImageIcon("images/fbicon.png").getImage().getScaledInstance(50, 50, Image.SCALE_AREA_AVERAGING));
        btnFB.setIcon(fb);
        ImageIcon msg = new ImageIcon(new ImageIcon("images/msgicon.png").getImage().getScaledInstance(50, 50, Image.SCALE_AREA_AVERAGING));
        btnMsg.setIcon(msg);
        ImageIcon mail = new ImageIcon(new ImageIcon("images/mailicon.png").getImage().getScaledInstance(50, 50, Image.SCALE_AREA_AVERAGING));
        btnMail.setIcon(mail);
        
        btnImdb.setContentAreaFilled(false);
        btnChange.setContentAreaFilled(false);
        btnFB.setContentAreaFilled(false);
        btnMsg.setContentAreaFilled(false);
        btnMail.setContentAreaFilled(false);
        
        loadLabel.setVisible(false);
        loadLabel2.setVisible(false);
        clipboardLabel.setVisible(false);
        
        genreSettings.setSelectedItem(genresettings);
        yearSettings.setSelectedItem(yearsettings);
    }
    
    private void processCode() throws IOException {
        JSONObject json = new JSONObject(IOUtils.toString(new URL("https://api.themoviedb.org/3/movie/"+movieid+"?api_key=425bdb4c5a7c0dc2665dcac134e879bb"), Charset.forName("UTF-8")));
        JSONObject json2 = new JSONObject(IOUtils.toString(new URL("https://api.themoviedb.org/3/movie/"+movieid+"/credits?api_key=425bdb4c5a7c0dc2665dcac134e879bb"), Charset.forName("UTF-8")));
        String title = (String) json.get("title");
        String temp1 = (String) json.get("poster_path");
        String poster = "https://image.tmdb.org/t/p/original" + temp1;
        String overview = (String) json.get("overview");
        String temp2 = (String) json.get("release_date");
        String year = "Year: " + temp2.substring(0,4);
        String imdbID = (String) json.get("imdb_id");
        
        String genre = "Genre: ";
        JSONArray ja = (JSONArray) json.get("genres");
        for (int i = 0; i < ja.length(); i++) {
            JSONObject row = ja.getJSONObject(i);
            if(i==0)
                genre = genre + row.getString("name");
            else
                genre = genre + ", " +row.getString("name");
        }
        
        String director = "Director: ";
        JSONArray ja2 = (JSONArray) json2.get("crew");
        int flag = 0;
        for (int i = 0; i < ja2.length(); i++) {
            JSONObject row = ja2.getJSONObject(i);
            if(row.getString("job").equals("Director"))
            {
                if(flag==0)
                {
                    director = director + row.getString("name");
                    flag = 1;
                }
                else
                {
                    director = director + ", " +row.getString("name");
                }
            }
                 
        }
        
        StringBuilder sb1 = new StringBuilder(1000);
        sb1.append("<html>").append(title).append("</html>");
        titleLabel.setText(sb1.toString());
        
        yearLabel.setText(year);
        genreLabel.setText(genre);
        directorLabel.setText(director);
        
        StringBuilder sb3 = new StringBuilder(1000);
        sb3.append("<html>").append(overview).append("</html>");
        overviewLabel.setText(sb3.toString());
        
        BufferedImage img = ImageIO.read(new URL(poster));
        ImageIcon image = new ImageIcon(img);
        Image scaleImage = image.getImage().getScaledInstance(posterView.getWidth(),posterView.getHeight(),Image.SCALE_SMOOTH);
        ImageIcon newimg = new ImageIcon(scaleImage);
        posterView.setIcon(newimg);
        
        imdb = "https://www.imdb.com/title/"+imdbID+"/?ref_=nv_sr_1?ref_=nv_sr_1";
    }
    
    private void getMovieID()
    {
        Connection c;
        Statement stmt;
        try
        {
            Class.forName("org.sqlite.JDBC");
            c = DriverManager.getConnection("jdbc:sqlite:MovieMindDB.db");
            c.setAutoCommit(false);

            stmt = c.createStatement();
            ResultSet rs = stmt.executeQuery("select MovieId from MoviesList where id=" + id);

            while (rs.next())
            {
                movieid  = rs.getInt("MovieId");
            }
            rs.close();
            stmt.close();
            c.close();
        }
        catch (Exception ex) 
        {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void getSavedData()
    {
        Connection c;
        Statement stmt;
        try
        {
            Class.forName("org.sqlite.JDBC");
            c = DriverManager.getConnection("jdbc:sqlite:MovieMindDB.db");
            c.setAutoCommit(false);

            stmt = c.createStatement();
            ResultSet rs = stmt.executeQuery("select * from SavedData");

            while (rs.next())
            {
                id  = rs.getInt("CurrentId");
                dbdate = rs.getString("Date");
            }
            rs.close();
            stmt.close();
            c.close();
        }
        catch (Exception ex) 
        {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void getSettings()
    {
        Connection c;
        Statement stmt;
        try
        {
            Class.forName("org.sqlite.JDBC");
            c = DriverManager.getConnection("jdbc:sqlite:MovieMindDB.db");
            c.setAutoCommit(false);

            stmt = c.createStatement();
            ResultSet rs = stmt.executeQuery("select * from SettingsData");

            while (rs.next())
            {
                genresettings  = rs.getString("Genre");
                yearsettings = rs.getString("Years");  
            }
            rs.close();
            stmt.close();
            c.close();
        }
        catch (Exception ex) 
        {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void updateID()
    {
        Connection c;
        PreparedStatement stmt;
        try
        {
            Class.forName("org.sqlite.JDBC");
            c = DriverManager.getConnection("jdbc:sqlite:MovieMindDB.db");
            c.setAutoCommit(false);

            String sql = "update SavedData set CurrentID=?";
            stmt = c.prepareStatement(sql);
            if(id==1414)
                id = 0;
            stmt.setInt(1, id+1);
            stmt.executeUpdate();
            c.commit();
            
            stmt.close();
            c.close();
            
            id = id+1;
        }
        catch (Exception ex) 
        {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void updateDate()
    {
        Connection c;
        PreparedStatement stmt;
        try
        {
            Class.forName("org.sqlite.JDBC");
            c = DriverManager.getConnection("jdbc:sqlite:MovieMindDB.db");
            c.setAutoCommit(false);

            String sql = "update SavedData set Date=?";
            stmt = c.prepareStatement(sql);
            stmt.setString(1, currentdate);
            stmt.executeUpdate();
            c.commit();
            
            stmt.close();
            c.close();
        }
        catch (Exception ex) 
        {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void updateSettings()
    {
        Connection c;
        PreparedStatement stmt;
        try
        {
            Class.forName("org.sqlite.JDBC");
            c = DriverManager.getConnection("jdbc:sqlite:MovieMindDB.db");
            c.setAutoCommit(false);

            String sql = "update SettingsData set Genre=?,Years=?";
            stmt = c.prepareStatement(sql);
            stmt.setString(1, genresettings);
            stmt.setString(2, yearsettings);
            stmt.executeUpdate();
            c.commit();
            
            stmt.close();
            c.close();
        }
        catch (Exception ex)
        {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void validateSettings() throws IOException
    {
        while(true)
        {
            boolean x = false, y = false;
            
            getMovieID();
            
            JSONObject json = new JSONObject(IOUtils.toString(new URL("https://api.themoviedb.org/3/movie/"+movieid+"?api_key=425bdb4c5a7c0dc2665dcac134e879bb"), Charset.forName("UTF-8")));
            
            if(genresettings.equals("None"))
            {
                x = true;
            }
            else
            {
                JSONArray ja = (JSONArray) json.get("genres");
                forloop:
                for (int i = 0; i < ja.length(); i++)
                {
                    JSONObject row = ja.getJSONObject(i);
                    String genre = row.getString("name");
                    if(genre.equals(genresettings))
                    {
                        x = true;
                        break forloop;
                    }
                }
            }
            
            if(yearsettings.equals("None"))
            {
                y = true;
            }
            else
            {
                String temp1 = (String) json.get("release_date");
                int year = Integer.parseInt(temp1.substring(0,4));
                int settingsyear1 = Integer.parseInt(yearsettings.substring(0,4));
                int settingsyear2 = Integer.parseInt(yearsettings.substring(8,12));
                if(year>=settingsyear1 && year<=(settingsyear2+9))
                    y = true;
            }
            
            if(x==true && y==true)
                break;
            else
                updateID();
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel aboutLabel;
    private javax.swing.JLabel bgHelp;
    private javax.swing.JLabel bgSettings;
    private javax.swing.JLabel bgSpotlight;
    private javax.swing.JPanel bodyPanel;
    private javax.swing.JButton btnChange;
    private javax.swing.JButton btnFB;
    private javax.swing.JButton btnHelp;
    private javax.swing.JButton btnImdb;
    private javax.swing.JButton btnMail;
    private javax.swing.JButton btnMsg;
    private javax.swing.JButton btnSaveSettings;
    private javax.swing.JButton btnSettings;
    private javax.swing.JButton btnSpotlight;
    private javax.swing.JLabel clipboardLabel;
    private javax.swing.JLabel descLabel;
    private javax.swing.JLabel directorLabel;
    private javax.swing.JLabel genreLabel;
    private javax.swing.JComboBox<String> genreSettings;
    private javax.swing.JLabel genreSettingsLabel;
    private javax.swing.JPanel helpPanel;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel loadLabel;
    private javax.swing.JLabel loadLabel2;
    private javax.swing.JPanel menuBar;
    private javax.swing.JLabel overviewLabel;
    private javax.swing.JLabel posterView;
    private javax.swing.JPanel settingsPanel;
    private javax.swing.JLabel settingsTopLabel;
    private javax.swing.JPanel spotlightPanel;
    private javax.swing.JLabel spotlightTitle;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JLabel touchLabel;
    private javax.swing.JLabel yearLabel;
    private javax.swing.JComboBox<String> yearSettings;
    private javax.swing.JLabel yearSettingsLabel;
    // End of variables declaration//GEN-END:variables

}
